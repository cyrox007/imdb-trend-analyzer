# scripts/run_prediction.py
from app.predictor import Kinovanga
from app.data_loader import load_imdb_chunked
from app.preprocessing import create_features
from utils.counter import count_lines_gz
from tabulate import tabulate
import pandas as pd
import numpy as np
import joblib
import gc

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
basics_path = 'data/title.basics.tsv.gz'
ratings_path = 'data/title.ratings.tsv.gz'
crew_path = 'data/title.crew.tsv.gz'
principals_path = 'data/title.principals.tsv.gz'  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# === 1. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
print("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –ö–∏–Ω–æ–í–∞–Ω–≥–∏ —Å —É—á—ë—Ç–æ–º –∂–∞–Ω—Ä–æ–≤ –∏ –∞–∫—Ç—ë—Ä–æ–≤...")

kino = Kinovanga()

kino.train_on_chunks(
    basics_path=basics_path,
    ratings_path=ratings_path,
    crew_path=crew_path,
    principals_path=principals_path,
    chunksize=10000,
    max_chunks=None,
    val_split=0.2
)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
kino.save("models/kinovanga_v2.pkl")
print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/kinovanga_v2.pkl")

# === 2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ ===
new_movies = [
    {
        'title': "The Batman: Part II",
        'director': "–ú—ç—Ç—Ç –†–∏–≤–∑",
        'year': 2026,
        'runtime': 150,
        'description': "–ë—ç—Ç–º–µ–Ω –ø—Ä–æ—Ç–∏–≤ –°–º–µ—Ä—Ç–∏. –¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å –≤ –∫—Ä–∏–∑–∏—Å–µ.",
        'genres': "Action, Crime, Drama",
        'actors': ["Robert Pattinson", "Zo√´ Kravitz", "Paul Dano"]
    },
    {
        'title': "–î—é–Ω–∞: –ß–∞—Å—Ç—å –¢—Ä–µ—Ç—å—è",
        'director': "–î–µ–Ω–∏ –í–∏–ª—å–Ω—ë–≤",
        'year': 2026,
        'runtime': 165,
        'description': "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏—á–µ—Å–∫–æ–π —Å–∞–≥–∏ –ø–æ —Ä–æ–º–∞–Ω–∞–º –§—Ä—ç–Ω–∫–∞ –ì–µ—Ä–±–µ—Ä—Ç–∞",
        'genres': "Sci-Fi, Adventure, Drama",
        'actors': ["Timoth√©e Chalamet", "Zendaya", "Rebecca Ferguson"]
    },
    {
        'title': "Avatar 3",
        'director': "–î–∂–µ–π–º—Å –ö—ç–º–µ—Ä–æ–Ω",
        'year': 2026,
        'runtime': 170,
        'description': "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —ç–ø–æ–ø–µ–∏ –æ –ü–∞–Ω–¥–æ—Ä–µ. –í —ç—Ç–æ–º —Ñ–∏–ª—å–º–µ –±—É–¥—É—Ç –±–æ–ª—å—à–µ –∞–∫—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–æ–¥–Ω–æ–π —Å—Ä–µ–¥–µ –∏ –Ω–æ–≤—ã—Ö –ø–ª–µ–º–µ–Ω–∞—Ö.",
        'genres': "Sci-Fi, Adventure, Action",
        'actors': ["Sam Worthington", "Zoe Saldana", "Sigourney Weaver"]
    }
]

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predictions = []
print("\n" + "="*60)
print("           üé¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –î–õ–Ø –ù–û–í–´–• –§–ò–õ–¨–ú–û–í")
print("="*60)

for movie in new_movies:
    try:
        rating = kino.predict_rating(
            title=movie['title'],
            director=movie.get('director', 'Unknown'),
            year=movie.get('year', 2000),
            runtime=movie.get('runtime', 90),
            description=movie.get('description', ''),
            genres=movie.get('genres', 'Unknown'),
            actors=movie.get('actors', [])
        )
        predictions.append({
            '–ù–∞–∑–≤–∞–Ω–∏–µ': movie['title'],
            '–ì–æ–¥': movie['year'],
            '–†–µ–∂–∏—Å—Å—ë—Ä': movie['director'],
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{movie['runtime']} –º–∏–Ω",
            '–ñ–∞–Ω—Ä—ã': movie['genres'],
            '–ê–∫—Ç—ë—Ä—ã': ", ".join(movie['actors']) if movie['actors'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã",
            '–†–µ–π—Ç–∏–Ω–≥': f"‚≠ê {round(rating, 1)}"
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–ª—è {movie['title']}: {e}")

# –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
print(tabulate(predictions, headers="keys", tablefmt="fancy_grid", stralign="center"))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ HTML (–∫–∞–∫ –≤ Colab)
df_pred = pd.DataFrame(predictions)
df_pred.to_html("predictions.html", index=False, escape=False)
print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ predictions.html (–æ—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ)")

# === 3. –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
print("\nüí° –°–æ–≤–µ—Ç: —Å–æ–∑–¥–∞–π `notebook.ipynb`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `display()` –∏ `.style.background_gradient()`")